services: # The containers we are going to run
  app:
    build:
      context: ./web-app # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile # The name of the Dockerfile definition
    container_name: app
    restart: unless-stopped
    volumes:
      - ./web-app/src:/app/src # To copy changes in the local machine to the container.
    ports:
      - "3000:3000" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - app-network # Connect the app to the network, in this case to use the database
    depends_on: # Build dependencies in case one containers needs another to be builded first
      - db # To build after the database
    environment:
      SESSION_SECRET: 1a5a16c9bc24b38c6810ef831b9705e2c365002374b8f3303870ce5201c014a494a242380048b41c32e1000f826eb82e1abc4dcf2ca5647b52878e98e28f38de
      DB_USERNAME: postgres
      DB_PASSWORD: mysecretpassword
      DB_HOST: db
      DB_NAME: postgres
  
  mqtt:
    build:
      context: ./mqtt-connection # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile # The name of the Dockerfile definition
    container_name: mqtt
    restart: unless-stopped
    volumes:
      - ./mqtt-connection/src:/mqtt/src # To copy changes in the local machine to the container.
    ports:
      - "3001:3001" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - app-network # Connect the app to the network, in this case to use the database
    depends_on: # Build dependencies in case one containers needs another to be builded first
      - db # To build after the database
    environment:
      DB_USERNAME: postgres
      DB_PASSWORD: mysecretpassword
      DB_HOST: db
      DB_NAME: postgres

  db: # The database service
    image: postgres # Using the oficial dockerhub image
    container_name: postgres
    networks:
      - app-network # Connect to the network to be used by other containers (ej: the web server)
    environment: # all the enviroment variables defined in the container (see postgres official image docs https://hub.docker.com/_/postgres)
      POSTGRES_PASSWORD: mysecretpassword 
    ports:
      - "5432:5432" # Expose to the local machine, for example to use a db UI like pgAdmin, etc...
    
    volumes:
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.
      - db-volume:/var/lib/postgresql/data 

  nginx:
    image: nginx:1.23-alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf # To copy changes in the local machine to the container.
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80" # To expose the app to the machine localhost (machine-port:container:port)
      - "443:443"
    networks:
      - app-network # Connect the app to the network, in this case to use the database

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # command: certonly --webroot -w /var/www/certbot renew --email crisberrios@uc.cl -d smartycities.tk -d www.smartycities.tk --agree-tos
    command: renew

networks: # All the networks that connects our containers
  app-network:
    driver: bridge

volumes: # All the named volumes needed to persist data after container deletion
  db-volume:
